// 判断是作为Application来运行还是作为Library来运行,isModule变量来自根目录下的config.gradle文件中,由于项目根目录下的build.gradle文件apply from 了config.gradle。所以子模块可以直接使用

if (isModule) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        ARouter配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//    Android Studio 默认 library 的所有的 resource 为 public,所以在模块化开发过程中总会遇到资源冲突问题,添加 resourcePrefix , 则所有的资源须以此 prefix 开头，否则报错
    resourcePrefix('device_resources_prefix_')

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(':base')

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
